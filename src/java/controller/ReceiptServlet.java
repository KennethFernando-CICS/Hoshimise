/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller;

import javax.servlet.*;
import javax.servlet.http.*;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.itextpdf.text.Font;
import java.io.*;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class ReceiptServlet extends HttpServlet {

    protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("application/pdf");
        OutputStream out = response.getOutputStream();
        HttpSession session = request.getSession();
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss"); //format for the local date
        String now = dtf.format(LocalDateTime.now()); //get the current time formatted by the DateTimeFormatter

        try {
            Rectangle rec = new Rectangle(Utilities.inchesToPoints(4), Utilities.inchesToPoints(7));
            Document doc = new Document(rec);

            PdfWriter writer = PdfWriter.getInstance(doc, out);

            float vMargin = Utilities.inchesToPoints((float) 0.4);
            float hMargin = Utilities.inchesToPoints((float) 0.1);
            doc.setMargins(hMargin, hMargin, vMargin, vMargin);

            Font[] f = {
                new Font(Font.FontFamily.TIMES_ROMAN, 15, Font.BOLD), //Thank you message font
                new Font(Font.FontFamily.TIMES_ROMAN, 17), //Total Font
                new Font(Font.FontFamily.TIMES_ROMAN, 13, Font.ITALIC), //Description and Price font
                new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.ITALIC)
            };

            //PDF Writing
            doc.open();
            //Paragraphs
            Paragraph divider = new Paragraph("----------------------------------------------------------------"),
                    tyMessage = new Paragraph("Thank you for shopping with us!", f[0]),
                    header = new Paragraph("CASH RECIEPT", f[0]),
                    user = new Paragraph("Generated by: " + session.getAttribute("username"), f[3]),
                    time = new Paragraph("Generated at: " + now, f[3]);
            divider.setAlignment(Paragraph.ALIGN_CENTER);
            tyMessage.setAlignment(Paragraph.ALIGN_CENTER);
            header.setAlignment(Paragraph.ALIGN_CENTER);
            time.setAlignment(Paragraph.ALIGN_CENTER);
            user.setAlignment(Paragraph.ALIGN_CENTER);

            //logo
            String relativeWebPath = "/resources/logo/rLogo.png";
            String absoluteDiskPath = getServletContext().getRealPath(relativeWebPath);
            Image img = Image.getInstance(absoluteDiskPath);
            img.setAlignment(Element.ALIGN_CENTER);
            doc.add(img);

            doc.add(divider);

            //includes header and time generated
            doc.add(header);
            doc.add(time);
            doc.add(user);

            doc.add(divider);

            //item list
            PdfPTable itemList = new PdfPTable(2);
            Paragraph item = new Paragraph("Description", f[2]);
            itemList.getDefaultCell().setBorder(0);
            PdfPCell price = new PdfPCell(new Paragraph("Price", f[2]));
            price.setHorizontalAlignment(Element.ALIGN_RIGHT);
            price.setBorder(PdfPCell.NO_BORDER);
            itemList.addCell(item);
            itemList.addCell(price);

            //edit mo nalang yung laman para maprint yung items
            String[] priceArray = new String[]{"$420.00", "$69.00", "$80085.00"}; //u can remove for testing purpose only
            String[] itemArray = new String[]{"$420.00", "$69.00", "$80085.00"}; //u can remove for testing purpose only

            for (int i = 0; i < priceArray.length; i++) {
                itemList.addCell(itemArray[i]); //ITO YUNG IEEDIT MO PARA SA ITEM NAME
                price = new PdfPCell(new Paragraph(priceArray[i])); //ITO YUNG IEEDIT MO PARA SA ITEM PRICE
                price.setHorizontalAlignment(Element.ALIGN_RIGHT);
                price.setBorder(PdfPCell.NO_BORDER);
                itemList.addCell(price);
            }
            doc.add(itemList);

            doc.add(divider);

            //Total Cost
            PdfPTable totalTable = new PdfPTable(2);
            totalTable.getDefaultCell().setBorder(0);

            //dito yung total price
            totalTable.addCell(new Paragraph("Total", f[1]));
            PdfPCell totalPrice = new PdfPCell(new Paragraph("$420.69", f[1])); //ITO YUNG IEEDIT MO PARA MALAGAY YUNG TOTAL PRICE
            totalPrice.setHorizontalAlignment(Element.ALIGN_RIGHT);
            totalPrice.setBorder(PdfPCell.NO_BORDER);
            totalTable.addCell(totalPrice);
            doc.add(totalTable);

            doc.add(divider);

            //Thank you message
            doc.add(tyMessage);
            doc.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            out.close();
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
